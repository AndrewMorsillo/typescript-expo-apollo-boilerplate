patch-package
new file mode 100644
--- /dev/null
+++ b/node_modules/expo/build/Expo.dom.js
@@ -0,0 +1,67 @@
+import * as React from 'react';
+import { View, Image, ActivityIndicator } from 'react-native';
+import resolveAssetSource from 'react-native/Libraries/Image/resolveAssetSource';
+
+export const Constants = {
+  statusBarHeight: 0,
+};
+
+export const Asset = {
+  loadAsync() {
+    //TODO
+  },
+};
+
+export const Font = {
+  loadedFonts: [],
+  isLoaded(fontName) {
+    return this.loadedFonts.includes(fontName);
+  },
+  loadAsync(fontConfig) {
+    return Promise.all(
+      Object.entries(fontConfig).map(async ([name, assetId]) => {
+        const asset = resolveAssetSource(assetId);
+        if (asset) {
+          await FontLoader.loadFont(name, asset.uri);
+          this.loadedFonts.push(name);
+        } else {
+          throw new Error();
+        }
+      })
+    );
+  },
+};
+
+export class AppLoading extends React.Component {
+  componentDidMount() {
+    if (this.props.startAsync) {
+      (async () => {
+        try {
+          await this.props.startAsync();
+          if (this.props.onFinish) {
+            this.props.onFinish();
+          }
+        } catch (e) {
+          if (this.props.onError) {
+            this.props.onError(e);
+          }
+        }
+      })();
+    }
+  }
+
+  render() {
+    return (
+      <View
+        style={{
+          flex: 1,
+          alignItems: 'center',
+          justifyContent: 'center',
+          backgroundColor: '#4E5EAB',
+        }}
+      >
+        <ActivityIndicator color="#fff" size="large" />
+      </View>
+    );
+  }
+}
new file mode 100644
--- /dev/null
+++ b/node_modules/expo/build/effects/BlurView.dom.js
@@ -0,0 +1,21 @@
+import PropTypes from 'prop-types';
+import * as React from 'react';
+import { View, StyleSheet, ViewPropTypes } from 'react-native';
+export default class BlurView extends React.Component {
+    render() {
+        let { tint, style = {}, ...props } = this.props;
+        let backgroundColor = 'rgba(255,255,255,0.4)';
+        if (tint === 'dark') {
+            backgroundColor = 'rgba(0,0,0,0.5)';
+        }
+        else if (tint === 'light') {
+            backgroundColor = 'rgba(255,255,255,0.7)';
+        }
+        return <View {...props} style={StyleSheet.flatten([style, { backgroundColor }])}/>;
+    }
+}
+BlurView.propTypes = {
+    tint: PropTypes.oneOf(['light', 'default', 'dark']),
+    ...ViewPropTypes,
+};
+//# sourceMappingURL=BlurView.web.js.map
\ No newline at end of file
new file mode 100644
--- /dev/null
+++ b/node_modules/expo/build/effects/NativeLinearGradient.dom.js
@@ -0,0 +1,61 @@
+import React from 'react';
+import { StyleSheet, View } from 'react-native';
+export default class NativeLinearGradient extends React.PureComponent {
+    constructor() {
+        super(...arguments);
+        this.state = {
+            width: undefined,
+            height: undefined,
+        };
+        this.onLayout = event => {
+            this.setState({
+                width: event.nativeEvent.layout.width,
+                height: event.nativeEvent.layout.height,
+            });
+            if (this.props.onLayout) {
+                this.props.onLayout(event);
+            }
+        };
+    }
+    getAngle() {
+        const startPoint = this.props.startPoint ? this.props.startPoint : [0.5, 0.0];
+        const endPoint = this.props.endPoint ? this.props.endPoint : [0.5, 1.0];
+        const { width = 0, height = 0 } = this.state;
+        let angle = 0;
+        const gradientWidth = height * (endPoint[0] - startPoint[0]);
+        const gradientHeight = width * (endPoint[1] - startPoint[1]);
+        angle = Math.atan2(gradientHeight, gradientWidth) + Math.PI / 2;
+        return `${angle}rad`;
+    }
+    getColors() {
+        const { colors } = this.props;
+        return colors
+            .map((color, index) => {
+            const colorStr = `${color.toString(16)}`;
+            const hex = `#${colorStr.substring(2, colorStr.length)}`;
+            const location = this.props.locations && this.props.locations[index];
+            if (location) {
+                return `${hex} ${location * 100}%`;
+            }
+            return hex;
+        })
+            .join(',');
+    }
+    getBackgroundImage() {
+        if (this.state.width && this.state.height) {
+            return `linear-gradient(${this.getAngle()},${this.getColors()})`;
+        }
+        else {
+            return 'transparent';
+        }
+    }
+    render() {
+        const { colors, locations, startPoint, endPoint, onLayout, style, ...props } = this.props;
+        let flatStyle = StyleSheet.flatten(style) || {};
+        // @ts-ignore: [ts] Property 'backgroundImage' does not exist on type 'ViewStyle'.
+        flatStyle.backgroundImage = this.getBackgroundImage();
+        // TODO: Bacon: In the future we could consider adding `backgroundRepeat: "no-repeat"`. For more browser support.
+        return <View style={flatStyle} onLayout={this.onLayout} {...props}/>;
+    }
+}
+//# sourceMappingURL=NativeLinearGradient.web.js.map
\ No newline at end of file
